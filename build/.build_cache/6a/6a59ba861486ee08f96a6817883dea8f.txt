{
    errdata = "In file included from src/dagman/task.c:1:\
In file included from include/dagman/task.h:7:\
\27[1minclude/dagman/datum.h:48:59: \27[0m\27[0;1;35mwarning: \27[0m\27[1mdeclaration of 'struct dm_task' will not be visible outside of this function [-Wvisibility]\27[0m\
void dm_datum_add_pending(struct dm_datum * datum, struct dm_task * task);\
\27[0;1;32m                                                          ^\
\27[0m\27[1msrc/dagman/task.c:10:116: \27[0m\27[0;1;35mwarning: \27[0m\27[1mformat specifies type 'int' but the argument has type 'int64_t' (aka 'long') [-Wformat]\27[0m\
  do { fprintf(stdout, \"\\x1B[1;34m\" \"info:\" \"\\x1B[0m\" \" \"); fprintf(stdout, \"dagman.task\" \": \" \"%d itaskparam %d\", task->uid, arg); fprintf(stdout, \"\\n\"); fflush(stdout); } while(0);\
\27[0;1;32m                                                                                                ~~                 ^~~~~~~~~\
\27[0m\27[0;32m                                                                                                %ld\
\27[0m\27[1msrc/dagman/task.c:13:18: \27[0m\27[0;1;35mwarning: \27[0m\27[1massigning to 'char *' from 'const char *' discards qualifiers [-Wincompatible-pointer-types-discards-qualifiers]\27[0m\
    task->symbol = __builtin_va_arg(args, const char*);\
\27[0;1;32m                 ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
\27[0m\27[1msrc/dagman/task.c:22:19: \27[0m\27[0;1;35mwarning: \27[0m\27[1mimplicit conversion from enumeration type 'enum dm_task_arg' to different enumeration type 'enum dm_access_mode' [-Wenum-conversion]\27[0m\
     param.mode = arg;\
\27[0;1;32m                ~ ^~~\
\27[0m\27[1msrc/dagman/task.c:24:124: \27[0m\27[0;1;35mwarning: \27[0m\27[1mformat specifies type 'int' but the argument has type 'int64_t' (aka 'long') [-Wformat]\27[0m\
     do { fprintf(stdout, \"\\x1B[1;34m\" \"info:\" \"\\x1B[0m\" \" \"); fprintf(stdout, \"dagman.task\" \": \" \"inoutask %d: param %d\", task->uid, absys_dm_param_vec_size(&task->params)); fprintf(stdout, \"\\n\"); fflush(stdout); } while(0);\
\27[0;1;32m                                                                                                            ~~             ^~~~~~~~~\
\27[0m\27[0;32m                                                                                                            %ld\
\27[0m\27[1msrc/dagman/task.c:11:10: \27[0m\27[0;1;35mwarning: \27[0m\27[1m7 enumeration values not handled in switch: 'DM_END', 'DM_DEP', 'DM_STAT'... [-Wswitch]\27[0m\
  switch(arg) {\
\27[0;1;32m         ^~~\
\27[0m\27[1msrc/dagman/task.c:52:31: \27[0m\27[0;1;35mwarning: \27[0m\27[1mpassing arguments to a function without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]\27[0m\
   task->kernel.kernel.fun.fun(rt, task);\
\27[0;1;32m                              ^\
\27[0m\27[1msrc/dagman/task.c:61:45: \27[0m\27[0;1;35mwarning: \27[0m\27[1mincompatible pointer types passing 'struct absys_dm_param_vec *' to parameter of type 'struct absys_dm_datum_vec *' [-Wincompatible-pointer-types]\27[0m\
 for(int i = 0; i < absys_dm_datum_vec_size(&task->params); i++) {\
\27[0;1;32m                                            ^~~~~~~~~~~~~\
\27[0m\27[1minclude/dagman/datum.h:44:398: \27[0m\27[0;1;30mnote: \27[0mpassing argument to parameter 'vec' here\27[0m\
struct absys_dm_datum_vec { struct dm_datum* data; int size; int capacity;};struct absys_dm_datum_vec_it { int cursor; struct absys_dm_datum_vec * vec;}; void absys_dm_datum_vec_init(struct absys_dm_datum_vec* vec); void absys_dm_datum_vec_exit(struct absys_dm_datum_vec* vec); _Bool absys_dm_datum_vec_empty(struct absys_dm_datum_vec* vec); int absys_dm_datum_vec_size(struct absys_dm_datum_vec* vec); void absys_dm_datum_vec_reserve(struct absys_dm_datum_vec* vec, int newcap); void absys_dm_datum_vec_resize(struct absys_dm_datum_vec* vec, int newsize); void absys_dm_datum_vec_push(struct absys_dm_datum_vec* vec, const struct dm_datum elem); void absys_dm_datum_vec_set(struct absys_dm_datum_vec* vec, int pos, const struct dm_datum elem); struct dm_datum absys_dm_datum_vec_get(struct absys_dm_datum_vec* vec, int idx); struct dm_datum *absys_dm_datum_vec_get_ref(struct absys_dm_datum_vec* vec, int idx); struct dm_datum absys_dm_datum_vec_first(struct absys_dm_datum_vec* vec); struct dm_datum absys_dm_datum_vec_last(struct absys_dm_datum_vec* vec); struct dm_datum * absys_dm_datum_vec_last_ref(struct absys_dm_datum_vec* vec); struct dm_datum absys_dm_datum_vec_pop(struct absys_dm_datum_vec* vec); void absys_dm_datum_vec_fill(struct absys_dm_datum_vec* vec, const struct dm_datum elem); void absys_dm_datum_vec_it_init(struct absys_dm_datum_vec_it* iter, struct absys_dm_datum_vec* vec); void absys_dm_datum_vec_it_exit(struct absys_dm_datum_vec_it* iter); void absys_dm_datum_vec_it_get(struct absys_dm_datum_vec_it* iter, struct dm_datum* value); _Bool absys_dm_datum_vec_it_next(struct absys_dm_datum_vec_it* iter);;\
\27[0;1;32m                                                                                                                                                                                                                                                                                                                                                                                                             ^\
\27[0m8 warnings generated.\
"
}